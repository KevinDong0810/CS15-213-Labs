#Phase_1:

## Assemble code of Phase_1:
0000000000400ee0 <phase_1>:
  400ee0:       48 83 ec 08             sub    $0x8,%rsp
  400ee4:       be 00 24 40 00          mov    $0x402400,%esi
  400ee9:       e8 4a 04 00 00          callq  401338 <strings_not_equal>
  400eee:       85 c0                   test   %eax,%eax
  400ef0:       74 05                   je     400ef7 <phase_1+0x17>
  400ef2:       e8 43 05 00 00          callq  40143a <explode_bomb>
  400ef7:       48 83 c4 08             add    $0x8,%rsp
  400efb:       c3                      retq

within gdb, we can check the string stored at $0x402400, and it turns out to be "Border relations with Canada have never been better.". To fuse the bomb, we need to input exactly the same word

#Phase_2:
## Assemble code of Phase_2:
0000000000400efc <phase_2>:
  400efc:       55                      push   %rbp
  400efd:       53                      push   %rbx
  400efe:       48 83 ec 28             sub    $0x28,%rsp // should be function stack
  400f02:       48 89 e6                mov    %rsp,%rsi
  400f05:       e8 52 05 00 00          callq  40145c <read_six_numbers> // which stores the values?
  400f0a:       83 3c 24 01             cmpl   $0x1,(%rsp) // should be a start of while or for loop
  400f0e:       74 20                   je     400f30 <phase_2+0x34>
  400f10:       e8 25 05 00 00          callq  40143a <explode_bomb>
  400f15:       eb 19                   jmp    400f30 <phase_2+0x34>
  400f17:       8b 43 fc                mov    -0x4(%rbx),%eax // take out the value %rbx - 0x4, and store it in %eax
  400f1a:       01 c0                   add    %eax,%eax // double it
  400f1c:       39 03                   cmp    %eax,(%rbx) // compare it with (%rbx)
  400f1e:       74 05                   je     400f25 <phase_2+0x29>
  400f20:       e8 15 05 00 00          callq  40143a <explode_bomb>
  400f25:       48 83 c3 04             add    $0x4,%rbx
  400f29:       48 39 eb                cmp    %rbp,%rbx // like a for loop here, after every iteration, add 0x4 to the iteration variable, check it with the ending condition
  400f2c:       75 e9                   jne    400f17 <phase_2+0x1b> // keep iteration
  400f2e:       eb 0c                   jmp    400f3c <phase_2+0x40> // larger, get out of this loop, and return to the caller function
  400f30:       48 8d 5c 24 04          lea    0x4(%rsp),%rbx // assign %rsp + 0x4 to %rbx
  400f35:       48 8d 6c 24 18          lea    0x18(%rsp),%rbp // assign %rsp + 0x18 to %rbp
  400f3a:       eb db                   jmp    400f17 <phase_2+0x1b>
  400f3c:       48 83 c4 28             add    $0x28,%rsp
  400f40:       5b                      pop    %rbx
  400f41:       5d                      pop    %rbp
  400f42:       c3                      retq

Input 6 numbers, which is a geometric sequence with a ratio of 2

#Phase_3:
## Assemble code of Phase_3:
0000000000400f43 <phase_3>:
  400f43:       48 83 ec 18             sub    $0x18,%rsp
  400f47:       48 8d 4c 24 0c          lea    0xc(%rsp),%rcx
  400f4c:       48 8d 54 24 08          lea    0x8(%rsp),%rdx
  400f51:       be cf 25 40 00          mov    $0x4025cf,%esi // sscanf input format "%d %d"
  400f56:       b8 00 00 00 00          mov    $0x0,%eax // initialize
  400f5b:       e8 90 fc ff ff          callq  400bf0 <__isoc99_sscanf@plt> // input
  400f60:       83 f8 01                cmp    $0x1,%eax // at least 2 inputs
  400f63:       7f 05                   jg     400f6a <phase_3+0x27>
  400f65:       e8 d0 04 00 00          callq  40143a <explode_bomb>
  400f6a:       83 7c 24 08 07          cmpl   $0x7,0x8(%rsp) // whether equals to $0x7
  400f6f:       77 3c                   ja     400fad <phase_3+0x6a> // if larger than 7, blow the bomb
  400f71:       8b 44 24 08             mov    0x8(%rsp),%eax // assign input value to %eax
  400f75:       ff 24 c5 70 24 40 00    jmpq   *0x402470(,%rax,8) // jumptable
  400f7c:       b8 cf 00 00 00          mov    $0xcf,%eax  // The blowing should be switch structure
  400f81:       eb 3b                   jmp    400fbe <phase_3+0x7b>
  400f83:       b8 c3 02 00 00          mov    $0x2c3,%eax
  400f88:       eb 34                   jmp    400fbe <phase_3+0x7b>
  400f8a:       b8 00 01 00 00          mov    $0x100,%eax
  400f8f:       eb 2d                   jmp    400fbe <phase_3+0x7b>
  400f91:       b8 85 01 00 00          mov    $0x185,%eax
  400f96:       eb 26                   jmp    400fbe <phase_3+0x7b>
  400f98:       b8 ce 00 00 00          mov    $0xce,%eax
  400f9d:       eb 1f                   jmp    400fbe <phase_3+0x7b>
  400f9f:       b8 aa 02 00 00          mov    $0x2aa,%eax
  400fa4:       eb 18                   jmp    400fbe <phase_3+0x7b>
  400fa6:       b8 47 01 00 00          mov    $0x147,%eax
  400fab:       eb 11                   jmp    400fbe <phase_3+0x7b>
  400fad:       e8 88 04 00 00          callq  40143a <explode_bomb>
  400fb2:       b8 00 00 00 00          mov    $0x0,%eax
  400fb7:       eb 05                   jmp    400fbe <phase_3+0x7b>
  400fb9:       b8 37 01 00 00          mov    $0x137,%eax
  400fbe:       3b 44 24 0c             cmp    0xc(%rsp),%eax // compare the result in %eax with sepcified input
  400fc2:       74 05                   je     400fc9 <phase_3+0x86> // if equals, safely exit the function, else, will blow the bomb
  400fc4:       e8 71 04 00 00          callq  40143a <explode_bomb>
  400fc9:       48 83 c4 18             add    $0x18,%rsp
  400fcd:       c3                      retq

This is a switch structure. We need to input two integers, the first one is the key, and the second one is the value. The correct key-value is shown below:
0 207; 1 311; 2 707; 3 256; 4 389; 5 206; 6 682; 7 327;


# Phase_4:

## func4 // a binary search, return #binary search - 1
func4(a, b, c):
   d = c - b
   if (c - b) < 0: 
      d = c - b + 1
   d >> 1 (algrithmatic right shift)
   temp = d + b
   if temp == a:
      return 0
   else
      if temp < a:
         a = temp + 1
         func4(a, b, c)
      else:
         c = memory(temp - 1)
         func4(a, b, c)
      
0000000000400fce <func4>: // 
  400fce:       48 83 ec 08             sub    $0x8,%rsp // assume original input is a, b, c. Return is d
  400fd2:       89 d0                   mov    %edx,%eax // d = c
  400fd4:       29 f0                   sub    %esi,%eax // d = c - b
  400fd6:       89 c1                   mov    %eax,%ecx //
  400fd8:       c1 e9 1f                shr    $0x1f,%ecx // logistic right shift 31, (c - b)
  400fdb:       01 c8                   add    %ecx,%eax // d = c - b + MSB(c - b) : if c > b, MSB(c - b) = 0, else MSB(c - b) = 1
  400fdd:       d1 f8                   sar    %eax // algorithm right shift d
  400fdf:       8d 0c 30                lea    (%rax,%rsi,1),%ecx // assign the value stored at %rax + % rsi to %ecx
  400fe2:       39 f9                   cmp    %edi,%ecx // compare a with mem(%rax + %rsi)
  400fe4:       7e 0c                   jle    400ff2 <func4+0x24> // if less or equal, the end condition of the recursive mechanism
  400fe6:       8d 51 ff                lea    -0x1(%rcx),%edx // %edx = mem(%rcx - 1)
  400fe9:       e8 e0 ff ff ff          callq  400fce <func4> // recursive call
  400fee:       01 c0                   add    %eax,%eax // strange, never being executed?
  400ff0:       eb 15                   jmp    401007 <func4+0x39>
  400ff2:       b8 00 00 00 00          mov    $0x0,%eax
  400ff7:       39 f9                   cmp    %edi,%ecx
  400ff9:       7d 0c                   jge    401007 <func4+0x39>
  400ffb:       8d 71 01                lea    0x1(%rcx),%esi
  400ffe:       e8 cb ff ff ff          callq  400fce <func4>
  401003:       8d 44 00 01             lea    0x1(%rax,%rax,1),%eax
  401007:       48 83 c4 08             add    $0x8,%rsp
  40100b:       c3                      retq   // return should be zero, otherwise the bomb will blow

soln: input two integers, the first integer is the half of (0+14)=7, the second is fixed at 0

#phase_5
 movzbl (%rbx,%rax,1),%ecx // when first enters here, %rax is initialized to be 0, %rbx stores the first input
  40108f:       88 0c 24                mov    %cl,(%rsp) // %cl is the lowest 8 bit of %ecx
  401092:       48 8b 14 24             mov    (%rsp),%rdx
  401096:       83 e2 0f                and    $0xf,%edx //
  401099:       0f b6 92 b0 24 40 00    movzbl 0x4024b0(%rdx),%edx
  4010a0:       88 54 04 10             mov    %dl,0x10(%rsp,%rax,1) // %dl is the lowest 8 bit of %edx
  4010a4:       48 83 c0 01             add    $0x1,%rax // this should be a for loop, %rax should be smaller than 6
  4010a8:       48 83 f8 06             cmp    $0x6,%rax

enter a 6-character string, process every character, so that we can get the string "flyers"















































